[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[dependency-groups]
docs = [
    "docutils>=0.17",
    "myst-parser",
    "packaging",
    "Sphinx",
    "sphinx-copybutton",
    "sphinx-inline-tabs",
    "sphinx-rtd-theme",
    "sphinxcontrib.autodoc-inherit-overload; python_version>='3.11'",
]

[project]
name = "aiologic"
dynamic = ["version"]
description = "GIL-powered* locking library for Python"
readme = {file = "README.rst", content-type = "text/x-rst"}
authors = [{name = "Ilya Egorov", email = "0x42005e1f@gmail.com"}]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: ISC License (ISCL)",
    "Intended Audience :: Developers",
    "Typing :: Typed",
    "Framework :: AsyncIO",
    "Framework :: Trio",
    "Framework :: AnyIO",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Free Threading :: 2 - Beta",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Operating System :: OS Independent",
]
keywords = [
    "anyio",
    "async",
    "async-await",
    "asyncio",
    "concurrency",
    "eventlet",
    "gevent",
    "greenlet",
    "library",
    "locking",
    "mypy",
    "python",
    "synchronization",
    "threading",
    "thread-safety",
    "trio",
]
dependencies = [
    "exceptiongroup>=1.0.2; python_version<'3.11'",
    "sniffio>=1.3.0",
    "typing-extensions>=4.5.0; python_version<'3.13'",
    "wrapt>=1.16.0",
]

[project.optional-dependencies]
anyio = ["anyio>=3.0.0"]
curio = ["curio>=1.4"]
eventlet = ["eventlet>=0.17.0"]
gevent = ["gevent>=21.1.0"]
trio = ["trio>=0.23.0"]
trio-asyncio = ["trio-asyncio>=0.13.0"]

[project.urls]
Homepage = "https://github.com/x42005e1f/aiologic"
Documentation = "https://aiologic.readthedocs.io"
Changelog = "https://aiologic.readthedocs.io/latest/changelog.html"

[tool.hatch.build.targets.sdist]
exclude = [".*"]

[tool.hatch.version]
fallback-version = "0.14.1.dev0"
source = "vcs"

[tool.ruff]
fix = true
line-length = 79
preview = true
show-fixes = true

[tool.ruff.lint]
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-async
    "ASYNC",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-bugbear
    "B",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging
    "LOG",
    # flake8-logging-format
    "G",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TC",
    # flake8-todos
    "TD",
    # flake8-fixme
    "FIX",
    # pygrep-hooks
    "PGH",
    # pylint
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # perflint
    "PERF",
    # refurb
    "FURB",
    # ruff-specific rules
    "RUF",
]
ignore = [
    # flake8-async
    "ASYNC105",  # trio-sync-call
    "ASYNC110",  # async-busy-wait
    # flake8-bandit
    "S101",  # assert
    # flake8-bugbear
    "B905",  # zip-without-explicit-strict
    "B911",  # batched-without-explicit-strict
    # flake8-commas
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
    # flake8-executable
    "EXE001",  # shebang-not-executable
    # flake8-implicit-str-concat
    "ISC001",  # single-line-implicit-string-concatenation
    "ISC002",  # multi-line-implicit-string-concatenation
    # flake8-pyi
    "PYI011",  # typed-argument-default-in-stub
    "PYI029",  # str-or-repr-defined-in-stub
    "PYI053",  # string-or-bytes-too-long
    "PYI054",  # numeric-literal-too-long
    # flake8-return
    "RET501",  # unnecessary-return-none
    "RET504",  # unnecessary-assign
    "RET505",  # superfluous-else-return
    "RET506",  # superfluous-else-raise
    "RET507",  # superfluous-else-continue
    "RET508",  # superfluous-else-break
    # flake8-simplify
    "SIM102",  # collapsible-if
    "SIM105",  # suppressible-exception
    "SIM108",  # if-else-block-instead-of-if-exp
    "SIM109",  # compare-with-tuple
    "SIM114",  # if-with-same-arms
    "SIM116",  # if-else-block-instead-of-dict-lookup
    "SIM210",  # if-expr-with-true-false
    "SIM211",  # if-expr-with-false-true
    "SIM300",  # yoda-conditions
    # pylint
    "PLC0414",  # useless-import-alias
    "PLC0415",  # import-outside-top-level
    "PLC2701",  # import-private-name
    "PLC2801",  # unnecessary-dunder-call
    "PLE0604",  # invalid-all-object
    "PLR0904",  # too-many-public-methods
    "PLR0911",  # too-many-return-statements
    "PLR0912",  # too-many-branches
    "PLR0913",  # too-many-arguments
    "PLR0914",  # too-many-locals
    "PLR0915",  # too-many-statements
    "PLR0916",  # too-many-boolean-expressions
    "PLR0917",  # too-many-positional-arguments
    "PLR1702",  # too-many-nested-blocks
    "PLR1704",  # redefined-argument-from-local
    "PLR1714",  # repeated-equality-comparison
    "PLR1730",  # if-stmt-min-max
    "PLR2004",  # magic-value-comparison
    "PLR5501",  # collapsible-else-if
    "PLR6301",  # no-self-use
    "PLW0603",  # global-statement
    # tryceratops
    "TRY003",  # raise-vanilla-args
    "TRY301",  # raise-within-try
    "TRY400",  # error-instead-of-exception
    # perflint
    "PERF203",  # try-except-in-loop
    # refurb
    "FURB101",  # read-whole-file
    "FURB103",  # write-whole-file
    "FURB154",  # repeated-global
    # ruff-specific rules
    "RUF029",  # unused-async
    "RUF052",  # used-dummy-variable
]
fixable = [
    "ALL",
]
unfixable = [
    # pyflakes
    "F401",  # unused-import
    "F504",  # percent-format-extra-named-arguments
    "F522",  # string-dot-format-extra-named-arguments
    "F523",  # string-dot-format-extra-positional-arguments
    "F601",  # multi-value-repeated-key-literal
    "F602",  # multi-value-repeated-key-variable
    "F811",  # redefined-while-unused
    "F841",  # unused-variable
    # flake8-bugbear
    "B006",  # mutable-argument-default
    "B007",  # unused-loop-control-variable
    # flake8-pie
    "PIE794",  # duplicate-class-field-definition
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI010",  # non-empty-stub-body
    "PYI011",  # typed-argument-default-in-stub
    "PYI014",  # argument-default-in-stub
    "PYI015",  # assignment-default-in-stub
    "PYI021",  # docstring-in-stub
    "PYI029",  # str-or-repr-defined-in-stub
    "PYI048",  # stub-body-multiple-statements
    "PYI051",  # redundant-literal-union
    # pylint
    "PLE4703",  # modified-iterating-set
    "PLW0128",  # redeclared-assigned-name
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
    # flake8-bandit
    "S301",  # suspicious-pickle-usage
    "S403",  # suspicious-pickle-import
]

[tool.ruff.lint.isort]
case-sensitive = true
combine-as-imports = true
lines-between-types = 1
